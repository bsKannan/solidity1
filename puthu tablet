pragma solidity ^0.4.0;
contract Recharge_Shop
{
    uint256 sum=0;
    uint256 count=0;
    uint256 CallStart;
    uint256 CallEnd;
    struct details 
    {
        uint256[] a;
        uint256 balance;
        uint256 ph_no;
        uint256 id;
        uint256 Total_duration;
    }
    struct comp
    {
        uint256[] ar;
    }
    mapping(uint256=>details) acc;
    mapping (uint256 =>comp) acc1;
    modifier check2(uint256 _cash,uint256 from)
    {
        require((_cash<acc[from].balance));
        _;
    }
    modifier check(uint256 ph_no)
    {
          while(ph_no!=0)
            {
            ph_no=(ph_no/10);
            count++;
            }
            require(count==10);
        _;
    }
    function bank_from(uint256 buy_for,uint256 how_much) 
    {
        acc[buy_for].balance=how_much;
    }
    function phone(uint256 ph_no) check(ph_no) private
    {
        acc[ph_no].ph_no=ph_no;
    }
    function transfer(uint256 from,uint256 ph_no,uint256 _cash,uint256 id)check2(_cash,from) public
    {
        acc[ph_no].id=id;
        acc[ph_no].balance+=_cash;
        acc[from].balance-=_cash;
        acc[ph_no].a.push(_cash);
        condition(id);
    }
    //doubt
    function condition(uint256 id)private
    {
        uint256 _cash;
        acc1[id].ar.push(_cash);
    }
    function total_amount(uint256 id) public  returns(uint256)
   {
       for(uint256 i=0;i<acc1[id].ar.length;i++)
       {
           sum+=acc1[id].ar[i];
       }
           return sum;
    } 
   function balance(uint256 from) public  returns(uint256)
   {
       uint256 td;
       td=Duration();
       return acc[from].balance;
   }
    function ph_bal(uint256 ph_no) public  returns(uint256)
   {
       uint256 td;
       td=Duration();
       acc[ph_no].balance=acc[ph_no].balance-td;
       return acc[ph_no].balance;
   }
    function ph_balance(uint256 ph_no) public  returns(uint256)
   {
       return acc[ph_no].balance;
   }
   function transation(uint256 ph_no) public  returns(uint256[])
   {
        return  acc[ph_no].a;
   }
   function Call_Start() 
   {
       CallStart=now;
   }
   function Call_End()  
   {
       CallEnd=now;
    }   
    function Duration()public  returns(uint256)
     {
         return CallEnd-CallStart;
     }
}
